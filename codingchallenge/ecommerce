create database ecom
use ecom

----1.create the table

create table customers(
       customer_id int primary key,
	   name varchar(100),
	   email varchar(100),
	   password varchar(100)

	);

create table products(
        product_id int primary key,
		name varchar(100),
		description varchar(100),
		price decimal(10,2),
		stockquantity int
      );
	  

create table cart (
    cart_id int primary key,
    customer_id int,
    product_id int,
    quantity int,
    foreign key (customer_id) references customers(customer_id),
    foreign key (product_id) references products(product_id)
);



create table orders(
        order_id int primary key,
		customer_id int,
		order_date date,
		total_price decimal(10,2),
		shipping_address varchar(100),
		foreign key(customer_id) references customers(customer_id)
		);

create table order_items(
        order_item_id int primary key,
		order_id int,
		product_id int,
		quantity int,
		iteam_amount decimal(10,2),
		foreign key(order_id) references orders(order_id),
		foreign key(product_id) references products(product_id)
		);

------inserting values---------


insert into products (product_id, name, description, price, stockQuantity) values
(1, 'Laptop', 'High-performance laptop', 800.00, 10),
(2, 'Smartphone', 'Latest smartphone', 600.00, 15),
(3, 'Tablet', 'Portable tablet', 300.00, 20),
(4, 'Headphones', 'Noise-canceling', 150.00, 30),
(5, 'TV', '4K Smart TV', 900.00, 5),
(6, 'Coffee Maker', 'Automatic coffee maker', 50.00, 25),
(7, 'Refrigerator', 'Energy-efficient', 700.00, 10),
(8, 'Microwave Oven', 'Countertop microwave', 80.00, 15),
(9, 'Blender', 'High-speed blender', 70.00, 20),
(10, 'Vacuum Cleaner', 'Bagless vacuum cleaner', 120.00, 10);



insert into customers (customer_id, name, email, password) values
(1, 'John Doe', 'johndoe@example.com', 'password123'),
(2, 'Jane Smith', 'janesmith@example.com', 'password123'),
(3, 'Robert Johnson', 'robert@example.com', 'password123'),
(4, 'Sarah Brown', 'sarah@example.com', 'password123'),
(5, 'David Lee', 'david@example.com', 'password123'),
(6, 'Laura Hall', 'laura@example.com', 'password123'),
(7, 'Michael Davis', 'michael@example.com', 'password123'),
(8, 'Emma Wilson', 'emma@example.com', 'password123'),
(9, 'William Taylor', 'william@example.com', 'password123'),
(10, 'Olivia Adams', 'olivia@example.com', 'password123');


insert into customers (customer_id, name, email, password) values
(1, 'John Doe', 'johndoe@example.com', 'password123'),
(2, 'Jane Smith', 'janesmith@example.com', 'password123'),
(3, 'Robert Johnson', 'robert@example.com', 'password123'),
(4, 'Sarah Brown', 'sarah@example.com', 'password123'),
(5, 'David Lee', 'david@example.com', 'password123'),
(6, 'Laura Hall', 'laura@example.com', 'password123'),
(7, 'Michael Davis', 'michael@example.com', 'password123'),
(8, 'Emma Wilson', 'emma@example.com', 'password123'),
(9, 'William Taylor', 'william@example.com', 'password123'),
(10, 'Olivia Adams', 'olivia@example.com', 'password123');

insert into orders (order_id, customer_id, order_date, total_price, shipping_address) values
(1, 1, '2023-01-05', 1200.00, '123 Main St, City'),
(2, 2, '2023-02-10', 900.00, '456 Elm St, Town'),
(3, 3, '2023-03-15', 300.00, '789 Oak St, Village'),
(4, 4, '2023-04-20', 150.00, '101 Pine St, Suburb'),
(5, 5, '2023-05-25', 1800.00, '234 Cedar St, District'),
(6, 6, '2023-06-30', 400.00, '567 Birch St, County'),
(7, 7, '2023-07-05', 700.00, '890 Maple St, State'),
(8, 8, '2023-08-10', 160.00, '321 Redwood St, Country'),
(9, 9, '2023-09-15', 140.00, '432 Spruce St, Province'),
(10, 10, '2023-10-20', 1400.00, '765 Fir St, Territory');


insert into order_items (order_item_id, order_id, product_id, quantity) values
(1, 1, 1, 2),
(2, 1, 3, 1),
(3, 2, 2, 3),
(4, 3, 5, 2),
(5, 4, 4, 4),
(6, 4, 6, 1),
(7, 5, 1, 1),
(8, 5, 2, 2),
(9, 6, 10, 2),
(10, 6, 9, 3);

insert into cart (cart_id, customer_id, product_id, quantity) values
(1, 1, 1, 2),
(2, 1, 3, 1),
(3, 2, 2, 3),
(4, 3, 4, 4),
(5, 3, 5, 2),
(6, 4, 6, 1),
(7, 5, 1, 1),
(8, 6, 10, 2),
(9, 6, 9, 3),
(10, 7, 7, 2);

---------------1. Update refrigerator product price to 800.

update products
set price=800
where name ='refrigerator';

select * from products;


---------------2. Remove all cart items for a specific customer
begin transaction
delete from cart
where customer_id =5;
rollback;

--------------3. Retrieve Products Priced Below $100

select * from products
where price <100;

---------------4. Find Products with Stock Quantity Greater Than 6

select * from products
where stockquantity > 5;

---------------5. Retrieve Orders with Total Amount Between $500 and $1000.

select * from orders
where total_price between 500 and 1000;


---------------6. Find Products which name end with letter ‘r’.

select * from products
where name like '%r';

--------------7. Retrieve Cart Items for Customer 5.

select * from cart
where customer_id =5;

------------8.find customers who placed orders in 2023.

select distinct c.customer_id,c.name
from customers c
join orders o on c.customer_id =o.customer_id
where o.order_date between '2023-01-01' and '2023-12-31';


------------9. determine the minimum stock quantity for each product category 

select name,min(stockquantity) as min_stock
from products
group by name;

-----------10. calculate the total amount spent by each customer

select o.customer_id ,c.name ,sum(o.total_price) as total_spent
from orders o 
join customers c on o.customer_id =c.customer_id
group by o.customer_id,c.name ;

------------11.find the average order amount for each customer

select o.customer_id, c.name,avg(o.total_price) as avg_order_amount
from orders o 
join customers c on o.customer_id = c.customer_id
group by o.customer_id,c.name;

-----------12.count the number of orders placed by each customer

select o.customer_id ,count(o.order_id) as order_count
from orders o
group by o.customer_id;

----------13.find the maximum order amount for each customer

select o.customer_id ,c.name,max(o.total_price) as max_order_amount
from orders o
join customers c on o.customer_id =c.customer_id
group by o.customer_id,c.name;

----------14.get customers who placed orders totaling over $1000

select o.customer_id ,sum(o.total_price) as total_spent
from orders o
group by o.customer_id
having sum(o.total_price)>1000;


----------15.subquery to find products not in the cart

select * from products
where product_id not in (select product_id from cart);

-------------16. subquery to find customers who haven't placed orders

select * from customers
where customer_id not in (select customer_id from orders);

-------------17. subquery to calculate the percentage of total revenue for a product

select p.name, 
       (sum(p.price * oi.quantity) / (select sum(total_price) from orders)) * 100 as revenue_percentage
from products p
join order_items oi on p.product_id = oi.product_id
group by p.name;

--------------18.subquery to find product with low stock


SELECT name, stockquantity
FROM products
WHERE stockquantity = (
    SELECT MIN(stockquantity)
    FROM products
);

-------------19.subquery to find customers who placed high-value orders

SELECT customer_id, name
FROM customers 
WHERE customer_id IN (
    SELECT customer_id
    FROM orders
    WHERE total_price > (
        SELECT AVG(total_price)
        FROM orders
    )
);

